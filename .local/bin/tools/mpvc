#!/bin/sh
# Control mpv using IPC protocol.
# Options interact with last opened instance unless '-a' flag is present.

socket=$(find /tmp/mpvsocket[0-9]* -type s 2>/dev/null | tail -n 1)

ipc_send() {
	pidof -q mpv || exit
	[ "$1" = '-a' ] && { ToAll=True; shift ;}

	cmd='{ "command": ['

	for arg in "$@"; do
		cmd="$cmd \"$arg\","
	done

	cmd=${cmd%?}' ] }'

	if [ -n "$ToAll" ]; then
		for i in /tmp/mpvsoc*; do
			[ -e "$i" ] || break
			socket=$i
			echo "$cmd" | socat - "$socket" >/dev/null
		done
	else
		echo "$cmd" | socat - "$socket" >/dev/null
	fi
}

_mpv() {
	setsid -f mpv --player-operation-mode=pseudo-gui "$@" >/dev/null 2>&1
}

case $1 in
	do) shift; ipc_send "$@" ;;
	prev|p) ipc_send 'playlist_prev' ;;
	next|n) ipc_send 'playlist_next' ;;
	toggle|t) ipc_send 'cycle' 'pause' ;;
	quit|q) ipc_send -a 'quit-watch-later'; return 0 ;;
	pauseall|pa) ipc_send -a 'set' 'pause' 'yes' ;;
	add)
		shift
		if [ -z "$socket" ]; then
			_mpv "$@"
		else
			[ -z "$*" ] && exit
			for f in "$@"; do
				if [ -t 2 ]; then
					ipc_send 'loadfile' "$(realpath "$f")" 'append-play'
				else
					ipc_send 'loadfile' "$f" 'append-play'
				fi
			done
			[ $? -eq 1 ] && rm /tmp/mpvsocket[0-9]* && _mpv "$@"
		fi
	;;
	sub)
		shift
		[ -z "$socket" ] && exit
		[ -z "$*" ] && exit
		for f in "$@"; do
			if [ -t 2 ]; then
				ipc_send 'sub-add' "$(realpath "$f")"
			else
				ipc_send 'sub-add' "$f"
			fi
		done
	;;
	replace|*)
		[ "$1" = "replace" ] && shift
		[ -e "$1" ] || exit
		if [ -z "$socket" ]; then
			_mpv "$@"
		else
			[ -z "$1" ] && exit
			if [ -t 2 ]; then
				ipc_send 'loadfile' "$(realpath "$1")" 'replace'
			else
				ipc_send 'loadfile' "$1" 'replace'
			fi
			[ $? -eq 1 ] && rm /tmp/mpvsocket[0-9]* && _mpv "$1"
		fi
	;;
esac

