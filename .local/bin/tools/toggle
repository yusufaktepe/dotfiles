#!/bin/sh
# Toggle script that I gathered from various scripts.

# 2018 Yusuf Aktepe <yusuf@yusufaktepe.com>
# https://github.com/yusufaktepe/dotfiles

ns() { notify-send -a toggle "$@" ;}

case $1 in
	audio)
		CURRENT_PROFILE=$(pactl list sinks | awk '/Active Port:/{print $3}')
		SINK=$(pacmd list-sinks | awk '/* index:/{print $3}')

		if [ "$CURRENT_PROFILE" = "analog-output-speaker" ]; then
			pactl set-sink-port "$SINK" "analog-output-headphones"
			pidof i3blocks >/dev/null && pkill -SIGRTMIN+10 i3blocks
			# [ -e /sys/class/leds/platform::micmute/brightness ] &&
			# 	echo 0 > /sys/class/leds/platform::micmute/brightness
			ns -i audio-headphones "PulseAudio" "<b>Headphone</b> Activated."
		else
			pactl set-sink-port "$SINK" "analog-output-speaker"
			pidof i3blocks >/dev/null && pkill -SIGRTMIN+10 i3blocks
			# [ -e /sys/class/leds/platform::micmute/brightness ] &&
			# 	echo 1 > /sys/class/leds/platform::micmute/brightness
			ns -i audio-speakers "PulseAudio" "<b>Speaker</b> Activated."
		fi
	;;
	net)
		case $2 in
			w|wifi) { [ "$(nmcli radio wifi)" = enabled ] &&
					nmcli radio wifi off ;} || nmcli radio wifi on ;;
			$NULL|*) { [ "$(nmcli networking)" = enabled ] &&
					nmcli networking off ;} || nmcli networking on ;;
		esac
	;;
	redshift)
		if pgrep -x redshift >/dev/null; then
			pkill redshift
			ns -i redshift-status-off "Redshift" "Status: <b>Closed</b>\nPeriod: <b>None</b>"
		else
			redshift >/dev/null 2>&1 &
			per=$(redshift -p 2>/dev/null | awk '/Period:/ {print $2}')
			ns -i redshift "Redshift" "Status: <b>Started</b>\nPeriod: <b>$per</b>"
		fi
	;;
	spotifyd)
		{ pgrep -x spotifyd >/dev/null && pkill spotifyd ;} || spotifyd
	;;
	stimeout)
		default=$(awk -F'"' '/OffTime/ {print $4*60}' /etc/X11/xorg.conf.d/10-monitor.conf)

		if [ "$(xset q | awk '/^  Standby/ {print $6}')" = 0 ]; then
			xset dpms 0 0 "$default"
			ns -i state_shutoff "Xorg" "Screen timeout enabled"
		else
			xset dpms 0 0 0
			ns -i state_running "Xorg" "Screen timeout disabled"
		fi
	;;
	syncthing)
		if pgrep -x syncthing >/dev/null; then
			pkill syncthing
			ns -i syncthing "Syncthing" "Sync stopped."
		else
			syncthing -no-browser >/dev/null 2>&1 &
			ns -i syncthing "Syncthing" "Started to sync."
		fi
	;;
	touchpad)
		device=$(xinput --list --name-only | grep -i touchpad)
		state=$(xinput list-props "$device" | grep "Device Enabled" | grep -o "[01]$")

		if [ "$state" = 1 ]; then
			xinput disable "$device"
			ns -i touchpad-disabled-symbolic "TouchPad Disabled"
		else
			xinput enable "$device"
			ns -i touchpad-enabled-symbolic "TouchPad Enabled"
		fi
	;;
	transmission|td)
		if pgrep -x transmission-da >/dev/null; then
			transmission-remote --exit >/dev/null
			ns -i transmission "Transmission" "Daemon killed."
		else
			transmission-daemon --logfile /dev/null
			ns -i transmission "Transmission" "Daemon started."
		fi
	;;
	webcam)
		pkill -f /dev/video ||
			mpv --no-cache --no-osc --no-input-default-bindings \
				--profile=low-latency --input-conf=/dev/null \
				--x11-name=webcam --geometry=-0-0 --autofit=30% /dev/video0
	;;
	$NULL|*)
		printf "Options:\n\taudio\n\tnet {w|wifi|NULL}\n\tredshift
			\r\tstimeout\n\tsyncthing\n\ttouchpad\n\ttransmission|td\n\twebcam\n"
	;;
esac
