#!/bin/sh
# Toggle script that I gathered from various scripts.

# 2018 Yusuf Aktepe <yusuf@yusufaktepe.com>
# https://github.com/yusufaktepe/dotfiles

case "$1" in
	audio)
		CURRENT_PROFILE=$(pactl list sinks | grep "Active Port" | cut -d ' ' -f 3-)
		SINK=$(pacmd list-sinks | awk '/* index:/{print $3}')

		if [ "$CURRENT_PROFILE" = "analog-output-speaker" ]; then
			pactl set-sink-port "$SINK" "analog-output-headphones"
			notify-send -a toggle -i audio-headphones "PulseAudio" "<b>Headphone</b> Activated."
		else
			pactl set-sink-port "$SINK" "analog-output-speaker"
			notify-send -a toggle -i audio-speakers "PulseAudio" "<b>Speaker</b> Activated."
		fi
	;;
	keybase)
		if systemctl -q is-active --user keybase; then
			systemctl stop --user kbfs && systemctl stop --user keybase
			notify-send -a toggle -i keybase "Keybase" "Keybase service stopped"
		else
			systemctl start --user keybase && systemctl start --user kbfs
			notify-send -a toggle -i keybase "Keybase" "Keybase service started"
		fi
	;;
	net)
		case "$2" in
			w|wifi)
				if [ "$(nmcli radio wifi)" = enabled ]; then
					nmcli radio wifi off
				else
					nmcli radio wifi on
				fi
			;;
			$NULL|*)
				if [ "$(nmcli networking)" = enabled ]; then
					nmcli networking off
				else
					nmcli networking on
				fi
			;;
		esac
	;;
	redshift)
		if ! pgrep -x "redshift" > /dev/null; then
			redshift > /dev/null 2>&1 &
			red=$(redshift -p | grep Period | awk '{print $2}')
			notify-send -a toggle -i redshift "Redshift" "Status: <b>Started</b>\nPeriod: <b>${red}</b>"
		else
			pkill redshift > /dev/null 2>&1 &
			notify-send -a toggle -i redshift-status-off "Redshift" "Status: <b>Closed</b>\nPeriod: <b>None</b>"
		fi
	;;
	spotifyd)
		if ! pgrep -x "spotifyd" > /dev/null; then
			spotifyd
		else
			pkill -TERM spotifyd
		fi
	;;
	stimeout)
		default=$(awk -F'"' '/OffTime/ {print $4*60}' /etc/X11/xorg.conf.d/10-monitor.conf)

		if [ "$(xset q | awk '/^  Standby/ {print $6}')" = 0 ]; then
			xset dpms 0 0 "$default"
			notify-send -a toggle -i state_shutoff "Xorg" "Screen timeout enabled"
		else
			xset dpms 0 0 0
			notify-send -a toggle -i state_running "Xorg" "Screen timeout disabled"
		fi
	;;
	touchpad)
		device=$(xinput --list --name-only | grep -i touchpad)
		state=$(xinput list-props "$device" | grep "Device Enabled" | grep -o "[01]$")

		if [ "$state" -eq '1' ]; then
			xinput disable "$device" && notify-send -a toggle -i touchpad-disabled-symbolic "TouchPad Disabled"
		else
			xinput enable "$device" && notify-send -a toggle -i touchpad-enabled-symbolic "TouchPad Enabled"
		fi
	;;
	$NULL|*)
		printf "Options:\n\t"
		printf "audio\n\tkeybase\n\tnet (w|wifi|NULL)\n\tredshift\n\tstimeout\n\ttouchpad\n"
	;;
esac
